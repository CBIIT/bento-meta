Nodes:
  node:
    Props:
      - id
      - handle
      - model
      - category
  relationship:
    Props:
      - handle
      - model
      - multiplicity
      - is_required
  property:
    Props:
      - handle
      - model
      - is_required
      - value_domain
      - units
      - pattern
  value_set:
    Props:
      - handle
      - url
  concept:
    Props:
      - id
  term:
    Props:
      - value
      - origin_id
      - origin_definition
  origin:
    Props:
      - name
      - url
      - is_external
  tag:
    Props:
      - key
      - value
Relationships:
  has_concept:
    Mul: many_to_one
    Props: null
    Ends:
      - Src: node
        Dst: concept
        Req: true
      - Src: property
        Dst: concept
        Req: true
      - Src: relationship
        Dst: concept
        Req: true
      - Src: value_set
        Dst: concept
        Req: false
  has_origin:
    Mul: many_to_one
    Props: null
    Ends:
      - Src: term
        Dst: origin
        Req: true
      - Src: value_set
        Dst: origin
        Mul: one_to_one
        Req: false
  has_src:
    Mul: one_to_one
    Props: null
    Ends:
      - Src: relationship
        Dst: node
        Req: true
  has_dst:
    Mul: one_to_one
    Props: null
    Ends:
      - Src: relationship
        Dst: node
        Req: true
  has_property:
    Mul: one_to_many
    Props: null
    Ends:
      - Src: node
        Dst: property
      - Src: relationship
        Dst: property
  has_value_set:
    Mul: one_to_one
    Props: null
    Ends:
      - Src: property
        Dst: value_set
  has_term:
    Mul: one_to_many
    Props: null
    Ends:
      - Src: value_set
        Dst: term
  has_tag:
    Mul: many_to_many
    Props: null
    Ends:
      - Src: node
        Dst: tag
      - Src: relationship
        Dst: tag
      - Src: property
        Dst: tag
      - Src: concept
        Dst: tag
      - Src: term
        Dst: tag
      - Src: value_set
        Dst: tag
      - Src: origin
        Dst: tag
  represents:
    Mul: one_to_many
    Props: null
    Ends:
      - Src: term
        Dst: concept
        Desc: |
          this is an interesting point in this representation- two terms could have the same value but be linked to (\"represent\")
          different concepts. Then the terms are \"homonyms\", but not \"synonyms\". The difference is in the graph context:
          a term\'s value is not its meaning, but the concept is, and the terms context is the value_set in which it is
          grouped (or the entity, including the entity\'s home model, which is linked to the concept)

UniversalNodeProperties:
  mustHave:
    - id
    - nanoid6
    - nanoid8
  mayHave:
    - desc

PropDefinitions:
  handle:
    Req: true
    Type: string
    Desc: |
      the name of the entity in local vocabulary; not necessarily the term
      per se. For a Relationship, the handle is the "relationship
      type" in a Neo4j representation
  id:
    Req: true
    Type: string
    Desc: content-free uid for model entities
  nanoid6:
    Req: true
    Type: string
    Desc: 6char content-free uid for model entities
  nanoid8:
    Req: true
    Type: string
    Desc: 8char content-free uid for model entities
  model:
    Req: true
    Type: string
    Desc: model (handle) in which this entity participates 
  is_external:
    Type: boolean
    Desc: if this Origin represents an external (to BIDS/CTOS) standard (property missing => false)
  url:
    Type: url
  pattern:
    Desc: A regular expression, set when value_domain = regexp
    Type: string
  origin_id:
    Type: string
    Req: true
    Desc: |
      the Origin authority\'s identifier for the Term - concept code, term ID, or similar
  origin_definition:
    Type: string
    Desc: |
      The text definition of the Term as provided by the Origin authority
  units:
    Desc: |
      For a value_domain of 'number', this property gives the units of the
      number as a string; e.g., 'mg', 'cm','degrees'. Multiple allowable
      units are separated by semicolons: 'um;angstrom'. Unit string tokens
      could (should?) have their own Terms and Concepts for completeness.
      For other value_domain values, units should be unset
    Type: string
  value_domain:
    Req: true
    Type:
      - number
      - integer
      - string
      - datetime
      - boolean
      - regexp
      - url
      - value_set
  